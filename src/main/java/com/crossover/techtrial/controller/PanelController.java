package com.crossover.techtrial.controller;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.crossover.techtrial.dto.DailyElectricity;
import com.crossover.techtrial.exceptions.PanelNotFoundException;
import com.crossover.techtrial.model.HourlyElectricity;
import com.crossover.techtrial.model.Panel;
import com.crossover.techtrial.service.HourlyElectricityService;
import com.crossover.techtrial.service.PanelService;

/**
 * Panel Controller for all Rest APIs related to Panel.
 *
 * @author Crossover
 *
 */

@RestController
@RequestMapping("/api/panels")
public class PanelController {

  @Autowired
  PanelService panelService;

  @Autowired
  HourlyElectricityService hourlyElectricityService;

  /**
   * Get a registered Panel.
   * @param serial of the Panel.
   * @return
   * @throws PanelNotFoundException
   */
  @GetMapping(path = "/{panel-serial}")
  public ResponseEntity<?> findPanel(@PathVariable(value = "panel-serial") String panelSerial)
          throws PanelNotFoundException {
    return ResponseEntity.ok(panelService.findBySerial(panelSerial));
  }

  /**
   * Register a Panel to System and start receiving the electricity statistics.
   * @param panel to register.
   * @return
   */
  @PostMapping(path = "/register")
  public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {

    panelService.register(panel);

    //MvcUriComponentsBuilder

    return ResponseEntity.created(URI.create("http://localhost:8080/api/panels/" + panel.getSerial())).build();
  }

  /**
   * Controller Method to save hourly Electricity to Database.
   *
   * @param panelSerial
   *            Serial number of Panel.
   * @param hourlyElectricity
   *            generated electricity for this panel.
   * @return
   * @throws PanelNotFoundException
   */

  @PostMapping(path = "/{panel-serial}/hourly")
  public ResponseEntity<?> saveHourlyElectricity(@PathVariable(value = "panel-serial") String panelSerial,
                                                 @RequestBody HourlyElectricity hourlyElectricity) throws PanelNotFoundException {
    hourlyElectricity.setPanel(panelService.findBySerial(panelSerial));
    return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
  }

  /**
   * Get Hourly Electricity from Previous dates.
   * @throws PanelNotFoundException
   */

  @GetMapping(path = "/{panel-serial}/hourly")
  public ResponseEntity<?> hourlyElectricity(@PathVariable(value = "panel-serial") String panelSerial,
                                             @PageableDefault(size = 5, value = 0, sort = "readingAt" ) Pageable pageable) throws PanelNotFoundException {
    Panel panel = panelService.findBySerial(panelSerial);
    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panel.getId(),
            pageable);
    return ResponseEntity.ok(page);
  }

  /**
   * This end point is used by Front end charts component to plot the daily
   * statistics of electricity generated by this Panel from the day it
   * registered to end of previous day.
   *
   * @param panelSerial
   *            is unique serial for this Panel.
   * @return
   * @throws PanelNotFoundException
   */

  @GetMapping(path = "/{panel-serial}/daily")
  public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
          @PathVariable(value = "panel-serial") String panelSerial) throws PanelNotFoundException {
    Panel panel = panelService.findBySerial(panelSerial);
    List<DailyElectricity> dailyElectricityForPanel = hourlyElectricityService.getDailyElectricityByPanelId(panel.getId());
    return ResponseEntity.ok(dailyElectricityForPanel);
  }
}